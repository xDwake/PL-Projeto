Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    EMPTYLINE
    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> linha table
Rule 2     table -> table categoria
Rule 3     table -> categoria
Rule 4     categoria -> header conteudo
Rule 5     categoria -> header subtitle conteudo
Rule 6     categoria -> subtitle conteudo
Rule 7     header -> PAR_RET_OPEN WORD PAR_RET_CLOSE
Rule 8     subtitle -> PAR_RET_OPEN WORD SUBTITLE PAR_RET_CLOSE
Rule 9     conteudo -> conteudo linha
Rule 10    conteudo -> linha
Rule 11    basicstring -> BASICSTRING
Rule 12    linha -> WORD EQUALS value
Rule 13    linha -> WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE
Rule 14    lista -> lista COMMA value
Rule 15    lista -> value
Rule 16    value -> basicstring
Rule 17    value -> LITERALSTRING
Rule 18    value -> TIME
Rule 19    value -> OFFSETDATETIME
Rule 20    value -> ZOFFSETDATETIME
Rule 21    value -> DATETIME
Rule 22    value -> DATE
Rule 23    value -> EXPONENCIALNUM
Rule 24    value -> BINNUM
Rule 25    value -> INTNUM
Rule 26    value -> HEXNUM
Rule 27    value -> OCTNUM
Rule 28    value -> lista

Terminals, with rules where they appear

BASICSTRING          : 11
BINNUM               : 24
COMMA                : 14
COMMENT              : 
DATE                 : 22
DATETIME             : 21
DOT                  : 
EMPTYLINE            : 
EQUALS               : 12 13
EXPONENCIALNUM       : 23
HEXNUM               : 26
INTNUM               : 25
LITERALSTRING        : 17
NEWLINE              : 
OCTNUM               : 27
OFFSETDATETIME       : 19
PAR_RET_CLOSE        : 7 8 13
PAR_RET_OPEN         : 7 8 13
SUBTITLE             : 8
TIME                 : 18
WORD                 : 7 8 12 13
ZOFFSETDATETIME      : 20
error                : 

Nonterminals, with rules where they appear

basicstring          : 16
categoria            : 2 3
conteudo             : 4 5 6 9
header               : 4 5
linha                : 1 9 10
lista                : 13 14 28
program              : 0
subtitle             : 5 6
table                : 1 2
value                : 12 14 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . linha table
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    WORD            shift and go to state 3

    program                        shift and go to state 1
    linha                          shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> linha . table
    (2) table -> . table categoria
    (3) table -> . categoria
    (4) categoria -> . header conteudo
    (5) categoria -> . header subtitle conteudo
    (6) categoria -> . subtitle conteudo
    (7) header -> . PAR_RET_OPEN WORD PAR_RET_CLOSE
    (8) subtitle -> . PAR_RET_OPEN WORD SUBTITLE PAR_RET_CLOSE

    PAR_RET_OPEN    shift and go to state 8

    table                          shift and go to state 4
    categoria                      shift and go to state 5
    header                         shift and go to state 6
    subtitle                       shift and go to state 7

state 3

    (12) linha -> WORD . EQUALS value
    (13) linha -> WORD . EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    EQUALS          shift and go to state 9


state 4

    (1) program -> linha table .
    (2) table -> table . categoria
    (4) categoria -> . header conteudo
    (5) categoria -> . header subtitle conteudo
    (6) categoria -> . subtitle conteudo
    (7) header -> . PAR_RET_OPEN WORD PAR_RET_CLOSE
    (8) subtitle -> . PAR_RET_OPEN WORD SUBTITLE PAR_RET_CLOSE

    $end            reduce using rule 1 (program -> linha table .)
    PAR_RET_OPEN    shift and go to state 8

    categoria                      shift and go to state 10
    header                         shift and go to state 6
    subtitle                       shift and go to state 7

state 5

    (3) table -> categoria .

    PAR_RET_OPEN    reduce using rule 3 (table -> categoria .)
    $end            reduce using rule 3 (table -> categoria .)


state 6

    (4) categoria -> header . conteudo
    (5) categoria -> header . subtitle conteudo
    (9) conteudo -> . conteudo linha
    (10) conteudo -> . linha
    (8) subtitle -> . PAR_RET_OPEN WORD SUBTITLE PAR_RET_CLOSE
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    PAR_RET_OPEN    shift and go to state 14
    WORD            shift and go to state 3

    conteudo                       shift and go to state 11
    subtitle                       shift and go to state 12
    linha                          shift and go to state 13

state 7

    (6) categoria -> subtitle . conteudo
    (9) conteudo -> . conteudo linha
    (10) conteudo -> . linha
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    WORD            shift and go to state 3

    conteudo                       shift and go to state 15
    linha                          shift and go to state 13

state 8

    (7) header -> PAR_RET_OPEN . WORD PAR_RET_CLOSE
    (8) subtitle -> PAR_RET_OPEN . WORD SUBTITLE PAR_RET_CLOSE

    WORD            shift and go to state 16


state 9

    (12) linha -> WORD EQUALS . value
    (13) linha -> WORD EQUALS . PAR_RET_OPEN lista PAR_RET_CLOSE
    (16) value -> . basicstring
    (17) value -> . LITERALSTRING
    (18) value -> . TIME
    (19) value -> . OFFSETDATETIME
    (20) value -> . ZOFFSETDATETIME
    (21) value -> . DATETIME
    (22) value -> . DATE
    (23) value -> . EXPONENCIALNUM
    (24) value -> . BINNUM
    (25) value -> . INTNUM
    (26) value -> . HEXNUM
    (27) value -> . OCTNUM
    (28) value -> . lista
    (11) basicstring -> . BASICSTRING
    (14) lista -> . lista COMMA value
    (15) lista -> . value

    PAR_RET_OPEN    shift and go to state 18
    LITERALSTRING   shift and go to state 21
    TIME            shift and go to state 22
    OFFSETDATETIME  shift and go to state 23
    ZOFFSETDATETIME shift and go to state 24
    DATETIME        shift and go to state 25
    DATE            shift and go to state 26
    EXPONENCIALNUM  shift and go to state 27
    BINNUM          shift and go to state 28
    INTNUM          shift and go to state 29
    HEXNUM          shift and go to state 30
    OCTNUM          shift and go to state 31
    BASICSTRING     shift and go to state 32

    value                          shift and go to state 17
    lista                          shift and go to state 19
    basicstring                    shift and go to state 20

state 10

    (2) table -> table categoria .

    PAR_RET_OPEN    reduce using rule 2 (table -> table categoria .)
    $end            reduce using rule 2 (table -> table categoria .)


state 11

    (4) categoria -> header conteudo .
    (9) conteudo -> conteudo . linha
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    PAR_RET_OPEN    reduce using rule 4 (categoria -> header conteudo .)
    $end            reduce using rule 4 (categoria -> header conteudo .)
    WORD            shift and go to state 3

    linha                          shift and go to state 33

state 12

    (5) categoria -> header subtitle . conteudo
    (9) conteudo -> . conteudo linha
    (10) conteudo -> . linha
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    WORD            shift and go to state 3

    conteudo                       shift and go to state 34
    linha                          shift and go to state 13

state 13

    (10) conteudo -> linha .

    WORD            reduce using rule 10 (conteudo -> linha .)
    PAR_RET_OPEN    reduce using rule 10 (conteudo -> linha .)
    $end            reduce using rule 10 (conteudo -> linha .)


state 14

    (8) subtitle -> PAR_RET_OPEN . WORD SUBTITLE PAR_RET_CLOSE

    WORD            shift and go to state 35


state 15

    (6) categoria -> subtitle conteudo .
    (9) conteudo -> conteudo . linha
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    PAR_RET_OPEN    reduce using rule 6 (categoria -> subtitle conteudo .)
    $end            reduce using rule 6 (categoria -> subtitle conteudo .)
    WORD            shift and go to state 3

    linha                          shift and go to state 33

state 16

    (7) header -> PAR_RET_OPEN WORD . PAR_RET_CLOSE
    (8) subtitle -> PAR_RET_OPEN WORD . SUBTITLE PAR_RET_CLOSE

    PAR_RET_CLOSE   shift and go to state 36
    SUBTITLE        shift and go to state 37


state 17

    (12) linha -> WORD EQUALS value .
    (15) lista -> value .

  ! reduce/reduce conflict for PAR_RET_OPEN resolved using rule 12 (linha -> WORD EQUALS value .)
  ! reduce/reduce conflict for WORD resolved using rule 12 (linha -> WORD EQUALS value .)
  ! reduce/reduce conflict for $end resolved using rule 12 (linha -> WORD EQUALS value .)
    PAR_RET_OPEN    reduce using rule 12 (linha -> WORD EQUALS value .)
    WORD            reduce using rule 12 (linha -> WORD EQUALS value .)
    $end            reduce using rule 12 (linha -> WORD EQUALS value .)
    COMMA           reduce using rule 15 (lista -> value .)

  ! PAR_RET_OPEN    [ reduce using rule 15 (lista -> value .) ]
  ! WORD            [ reduce using rule 15 (lista -> value .) ]
  ! $end            [ reduce using rule 15 (lista -> value .) ]


state 18

    (13) linha -> WORD EQUALS PAR_RET_OPEN . lista PAR_RET_CLOSE
    (14) lista -> . lista COMMA value
    (15) lista -> . value
    (16) value -> . basicstring
    (17) value -> . LITERALSTRING
    (18) value -> . TIME
    (19) value -> . OFFSETDATETIME
    (20) value -> . ZOFFSETDATETIME
    (21) value -> . DATETIME
    (22) value -> . DATE
    (23) value -> . EXPONENCIALNUM
    (24) value -> . BINNUM
    (25) value -> . INTNUM
    (26) value -> . HEXNUM
    (27) value -> . OCTNUM
    (28) value -> . lista
    (11) basicstring -> . BASICSTRING

    LITERALSTRING   shift and go to state 21
    TIME            shift and go to state 22
    OFFSETDATETIME  shift and go to state 23
    ZOFFSETDATETIME shift and go to state 24
    DATETIME        shift and go to state 25
    DATE            shift and go to state 26
    EXPONENCIALNUM  shift and go to state 27
    BINNUM          shift and go to state 28
    INTNUM          shift and go to state 29
    HEXNUM          shift and go to state 30
    OCTNUM          shift and go to state 31
    BASICSTRING     shift and go to state 32

    lista                          shift and go to state 38
    value                          shift and go to state 39
    basicstring                    shift and go to state 20

state 19

    (28) value -> lista .
    (14) lista -> lista . COMMA value

  ! shift/reduce conflict for COMMA resolved as shift
    PAR_RET_OPEN    reduce using rule 28 (value -> lista .)
    WORD            reduce using rule 28 (value -> lista .)
    $end            reduce using rule 28 (value -> lista .)
    PAR_RET_CLOSE   reduce using rule 28 (value -> lista .)
    COMMA           shift and go to state 40

  ! COMMA           [ reduce using rule 28 (value -> lista .) ]


state 20

    (16) value -> basicstring .

    PAR_RET_OPEN    reduce using rule 16 (value -> basicstring .)
    WORD            reduce using rule 16 (value -> basicstring .)
    $end            reduce using rule 16 (value -> basicstring .)
    COMMA           reduce using rule 16 (value -> basicstring .)
    PAR_RET_CLOSE   reduce using rule 16 (value -> basicstring .)


state 21

    (17) value -> LITERALSTRING .

    PAR_RET_OPEN    reduce using rule 17 (value -> LITERALSTRING .)
    WORD            reduce using rule 17 (value -> LITERALSTRING .)
    $end            reduce using rule 17 (value -> LITERALSTRING .)
    COMMA           reduce using rule 17 (value -> LITERALSTRING .)
    PAR_RET_CLOSE   reduce using rule 17 (value -> LITERALSTRING .)


state 22

    (18) value -> TIME .

    PAR_RET_OPEN    reduce using rule 18 (value -> TIME .)
    WORD            reduce using rule 18 (value -> TIME .)
    $end            reduce using rule 18 (value -> TIME .)
    COMMA           reduce using rule 18 (value -> TIME .)
    PAR_RET_CLOSE   reduce using rule 18 (value -> TIME .)


state 23

    (19) value -> OFFSETDATETIME .

    PAR_RET_OPEN    reduce using rule 19 (value -> OFFSETDATETIME .)
    WORD            reduce using rule 19 (value -> OFFSETDATETIME .)
    $end            reduce using rule 19 (value -> OFFSETDATETIME .)
    COMMA           reduce using rule 19 (value -> OFFSETDATETIME .)
    PAR_RET_CLOSE   reduce using rule 19 (value -> OFFSETDATETIME .)


state 24

    (20) value -> ZOFFSETDATETIME .

    PAR_RET_OPEN    reduce using rule 20 (value -> ZOFFSETDATETIME .)
    WORD            reduce using rule 20 (value -> ZOFFSETDATETIME .)
    $end            reduce using rule 20 (value -> ZOFFSETDATETIME .)
    COMMA           reduce using rule 20 (value -> ZOFFSETDATETIME .)
    PAR_RET_CLOSE   reduce using rule 20 (value -> ZOFFSETDATETIME .)


state 25

    (21) value -> DATETIME .

    PAR_RET_OPEN    reduce using rule 21 (value -> DATETIME .)
    WORD            reduce using rule 21 (value -> DATETIME .)
    $end            reduce using rule 21 (value -> DATETIME .)
    COMMA           reduce using rule 21 (value -> DATETIME .)
    PAR_RET_CLOSE   reduce using rule 21 (value -> DATETIME .)


state 26

    (22) value -> DATE .

    PAR_RET_OPEN    reduce using rule 22 (value -> DATE .)
    WORD            reduce using rule 22 (value -> DATE .)
    $end            reduce using rule 22 (value -> DATE .)
    COMMA           reduce using rule 22 (value -> DATE .)
    PAR_RET_CLOSE   reduce using rule 22 (value -> DATE .)


state 27

    (23) value -> EXPONENCIALNUM .

    PAR_RET_OPEN    reduce using rule 23 (value -> EXPONENCIALNUM .)
    WORD            reduce using rule 23 (value -> EXPONENCIALNUM .)
    $end            reduce using rule 23 (value -> EXPONENCIALNUM .)
    COMMA           reduce using rule 23 (value -> EXPONENCIALNUM .)
    PAR_RET_CLOSE   reduce using rule 23 (value -> EXPONENCIALNUM .)


state 28

    (24) value -> BINNUM .

    PAR_RET_OPEN    reduce using rule 24 (value -> BINNUM .)
    WORD            reduce using rule 24 (value -> BINNUM .)
    $end            reduce using rule 24 (value -> BINNUM .)
    COMMA           reduce using rule 24 (value -> BINNUM .)
    PAR_RET_CLOSE   reduce using rule 24 (value -> BINNUM .)


state 29

    (25) value -> INTNUM .

    PAR_RET_OPEN    reduce using rule 25 (value -> INTNUM .)
    WORD            reduce using rule 25 (value -> INTNUM .)
    $end            reduce using rule 25 (value -> INTNUM .)
    COMMA           reduce using rule 25 (value -> INTNUM .)
    PAR_RET_CLOSE   reduce using rule 25 (value -> INTNUM .)


state 30

    (26) value -> HEXNUM .

    PAR_RET_OPEN    reduce using rule 26 (value -> HEXNUM .)
    WORD            reduce using rule 26 (value -> HEXNUM .)
    $end            reduce using rule 26 (value -> HEXNUM .)
    COMMA           reduce using rule 26 (value -> HEXNUM .)
    PAR_RET_CLOSE   reduce using rule 26 (value -> HEXNUM .)


state 31

    (27) value -> OCTNUM .

    PAR_RET_OPEN    reduce using rule 27 (value -> OCTNUM .)
    WORD            reduce using rule 27 (value -> OCTNUM .)
    $end            reduce using rule 27 (value -> OCTNUM .)
    COMMA           reduce using rule 27 (value -> OCTNUM .)
    PAR_RET_CLOSE   reduce using rule 27 (value -> OCTNUM .)


state 32

    (11) basicstring -> BASICSTRING .

    PAR_RET_OPEN    reduce using rule 11 (basicstring -> BASICSTRING .)
    WORD            reduce using rule 11 (basicstring -> BASICSTRING .)
    $end            reduce using rule 11 (basicstring -> BASICSTRING .)
    COMMA           reduce using rule 11 (basicstring -> BASICSTRING .)
    PAR_RET_CLOSE   reduce using rule 11 (basicstring -> BASICSTRING .)


state 33

    (9) conteudo -> conteudo linha .

    WORD            reduce using rule 9 (conteudo -> conteudo linha .)
    PAR_RET_OPEN    reduce using rule 9 (conteudo -> conteudo linha .)
    $end            reduce using rule 9 (conteudo -> conteudo linha .)


state 34

    (5) categoria -> header subtitle conteudo .
    (9) conteudo -> conteudo . linha
    (12) linha -> . WORD EQUALS value
    (13) linha -> . WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE

    PAR_RET_OPEN    reduce using rule 5 (categoria -> header subtitle conteudo .)
    $end            reduce using rule 5 (categoria -> header subtitle conteudo .)
    WORD            shift and go to state 3

    linha                          shift and go to state 33

state 35

    (8) subtitle -> PAR_RET_OPEN WORD . SUBTITLE PAR_RET_CLOSE

    SUBTITLE        shift and go to state 37


state 36

    (7) header -> PAR_RET_OPEN WORD PAR_RET_CLOSE .

    PAR_RET_OPEN    reduce using rule 7 (header -> PAR_RET_OPEN WORD PAR_RET_CLOSE .)
    WORD            reduce using rule 7 (header -> PAR_RET_OPEN WORD PAR_RET_CLOSE .)


state 37

    (8) subtitle -> PAR_RET_OPEN WORD SUBTITLE . PAR_RET_CLOSE

    PAR_RET_CLOSE   shift and go to state 41


state 38

    (13) linha -> WORD EQUALS PAR_RET_OPEN lista . PAR_RET_CLOSE
    (14) lista -> lista . COMMA value
    (28) value -> lista .

  ! shift/reduce conflict for PAR_RET_CLOSE resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    PAR_RET_CLOSE   shift and go to state 42
    COMMA           shift and go to state 40

  ! PAR_RET_CLOSE   [ reduce using rule 28 (value -> lista .) ]
  ! COMMA           [ reduce using rule 28 (value -> lista .) ]


state 39

    (15) lista -> value .

    PAR_RET_CLOSE   reduce using rule 15 (lista -> value .)
    COMMA           reduce using rule 15 (lista -> value .)


state 40

    (14) lista -> lista COMMA . value
    (16) value -> . basicstring
    (17) value -> . LITERALSTRING
    (18) value -> . TIME
    (19) value -> . OFFSETDATETIME
    (20) value -> . ZOFFSETDATETIME
    (21) value -> . DATETIME
    (22) value -> . DATE
    (23) value -> . EXPONENCIALNUM
    (24) value -> . BINNUM
    (25) value -> . INTNUM
    (26) value -> . HEXNUM
    (27) value -> . OCTNUM
    (28) value -> . lista
    (11) basicstring -> . BASICSTRING
    (14) lista -> . lista COMMA value
    (15) lista -> . value

    LITERALSTRING   shift and go to state 21
    TIME            shift and go to state 22
    OFFSETDATETIME  shift and go to state 23
    ZOFFSETDATETIME shift and go to state 24
    DATETIME        shift and go to state 25
    DATE            shift and go to state 26
    EXPONENCIALNUM  shift and go to state 27
    BINNUM          shift and go to state 28
    INTNUM          shift and go to state 29
    HEXNUM          shift and go to state 30
    OCTNUM          shift and go to state 31
    BASICSTRING     shift and go to state 32

    lista                          shift and go to state 19
    value                          shift and go to state 43
    basicstring                    shift and go to state 20

state 41

    (8) subtitle -> PAR_RET_OPEN WORD SUBTITLE PAR_RET_CLOSE .

    WORD            reduce using rule 8 (subtitle -> PAR_RET_OPEN WORD SUBTITLE PAR_RET_CLOSE .)


state 42

    (13) linha -> WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE .

    PAR_RET_OPEN    reduce using rule 13 (linha -> WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE .)
    WORD            reduce using rule 13 (linha -> WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE .)
    $end            reduce using rule 13 (linha -> WORD EQUALS PAR_RET_OPEN lista PAR_RET_CLOSE .)


state 43

    (14) lista -> lista COMMA value .
    (15) lista -> value .

  ! reduce/reduce conflict for PAR_RET_OPEN resolved using rule 14 (lista -> lista COMMA value .)
  ! reduce/reduce conflict for WORD resolved using rule 14 (lista -> lista COMMA value .)
  ! reduce/reduce conflict for $end resolved using rule 14 (lista -> lista COMMA value .)
  ! reduce/reduce conflict for COMMA resolved using rule 14 (lista -> lista COMMA value .)
  ! reduce/reduce conflict for PAR_RET_CLOSE resolved using rule 14 (lista -> lista COMMA value .)
    PAR_RET_OPEN    reduce using rule 14 (lista -> lista COMMA value .)
    WORD            reduce using rule 14 (lista -> lista COMMA value .)
    $end            reduce using rule 14 (lista -> lista COMMA value .)
    COMMA           reduce using rule 14 (lista -> lista COMMA value .)
    PAR_RET_CLOSE   reduce using rule 14 (lista -> lista COMMA value .)

  ! PAR_RET_OPEN    [ reduce using rule 15 (lista -> value .) ]
  ! WORD            [ reduce using rule 15 (lista -> value .) ]
  ! $end            [ reduce using rule 15 (lista -> value .) ]
  ! COMMA           [ reduce using rule 15 (lista -> value .) ]
  ! PAR_RET_CLOSE   [ reduce using rule 15 (lista -> value .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 19 resolved as shift
WARNING: shift/reduce conflict for PAR_RET_CLOSE in state 38 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 38 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (linha -> WORD EQUALS value)
WARNING: rejected rule (lista -> value) in state 17
WARNING: reduce/reduce conflict in state 43 resolved using rule (lista -> lista COMMA value)
WARNING: rejected rule (lista -> value) in state 43
